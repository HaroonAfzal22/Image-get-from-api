import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Images From Api';

    return const MaterialApp(
      title: appTitle,
      home: MyHomePage(title: appTitle),
    );
  }
}

Future<List<CPhoto>> fetchPhotos(http.Client client) async {
  final response =
      await client.get(Uri.parse('http://192.168.1.2:8001/api/categories'));

  // Use the compute function to run parsePhotos in a separate isolate.
  return compute(parsePhotos, response.body);
}

// A function that converts a response body into a List<Photo>.
List<CPhoto> parsePhotos(String responseBody) {
  final parsed = jsonDecode(responseBody).cast<Map<String, dynamic>>();

  return parsed.map<CPhoto>((json) => CPhoto.fromJson(json)).toList();
}

class CPhoto {
  // final int albumId;
  final int id;
  final String imagetitle;
  final String url;
  // final String thumbnailUrl;

  const CPhoto({
    // required this.albumId,
    required this.id,
    required this.imagetitle,
    required this.url,
    // required this.thumbnailUrl,
  });

  factory CPhoto.fromJson(Map<String, dynamic> json) {
    return CPhoto(
      id: json['id'] as int,
      imagetitle: json['category_name'] as String,
      url: json['category_image'] as String,
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
      ),
      body: FutureBuilder<List<CPhoto>>(
        future: fetchPhotos(http.Client()),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return const Center(
              child: Text('An error has occurred!'),
            );
          } else if (snapshot.hasData) {
            return PhotosList(photos: snapshot.data!);
          } else {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),
    );
  }
}

class PhotosList extends StatelessWidget {
  const PhotosList({Key? key, required this.photos}) : super(key: key);

  final List<CPhoto> photos;

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
       scrollDirection:Axis.horizontal ,

      itemCount: photos.length,
      itemBuilder: (context, index) {
        return Column(
          children: [
            Image.network(photos[index].url),
            Text(
              photos[index].id.toString(),
              style: TextStyle(color: Colors.blue, fontSize: 30,fontWeight: FontWeight.bold,),
            ),

            // Text('My text',style: TextStyle(
            //   fontSize: 50,
            //   fontWeight:FontWeight.bold,
            // ),)
          ],
        );
        // return Image.network(photos[index].url);
      },
    );
  }
}
